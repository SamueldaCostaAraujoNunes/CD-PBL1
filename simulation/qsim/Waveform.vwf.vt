// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2021 10:51:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Entradas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Entradas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN_A;
reg IN_B;
reg IN_C;
reg IN_D;
reg IN_E;
reg IN_F;
reg IN_G;
reg IN_H;
reg IN_I;
reg IN_J;
// wires                                               
wire LOTE_ACEITO;
wire LOTE_COMPROMETIDO;
wire LOTE_RECUSADO;

// assign statements (if any)                          
Entradas i1 (
// port map - connection between master ports and signals/registers   
	.IN_A(IN_A),
	.IN_B(IN_B),
	.IN_C(IN_C),
	.IN_D(IN_D),
	.IN_E(IN_E),
	.IN_F(IN_F),
	.IN_G(IN_G),
	.IN_H(IN_H),
	.IN_I(IN_I),
	.IN_J(IN_J),
	.LOTE_ACEITO(LOTE_ACEITO),
	.LOTE_COMPROMETIDO(LOTE_COMPROMETIDO),
	.LOTE_RECUSADO(LOTE_RECUSADO)
);
initial 
begin 
#1000000 $finish;
end 

// IN_A
initial
begin
	IN_A = 1'b0;
	IN_A = #10000 1'b1;
	IN_A = #180000 1'b0;
	IN_A = #200000 1'b1;
	IN_A = #110000 1'b0;
end 

// IN_B
initial
begin
	IN_B = 1'b0;
	IN_B = #30000 1'b1;
	IN_B = #180000 1'b0;
	IN_B = #180000 1'b1;
	IN_B = #170000 1'b0;
end 

// IN_C
initial
begin
	IN_C = 1'b0;
	IN_C = #50000 1'b1;
	IN_C = #180000 1'b0;
	IN_C = #160000 1'b1;
	IN_C = #260000 1'b0;
end 

// IN_D
initial
begin
	IN_D = 1'b0;
	IN_D = #30000 1'b1;
	IN_D = #260000 1'b0;
	IN_D = #100000 1'b1;
	IN_D = #260000 1'b0;
end 

// IN_E
initial
begin
	IN_E = 1'b0;
	IN_E = #30000 1'b1;
	IN_E = #40000 1'b0;
	IN_E = #90000 1'b1;
	IN_E = #60000 1'b0;
	IN_E = #170000 1'b1;
	IN_E = #330000 1'b0;
end 

// IN_F
initial
begin
	IN_F = 1'b0;
	IN_F = #20000 1'b1;
	IN_F = #50000 1'b0;
	IN_F = #90000 1'b1;
	IN_F = #60000 1'b0;
	IN_F = #170000 1'b1;
	IN_F = #330000 1'b0;
end 

// IN_G
initial
begin
	IN_G = 1'b0;
	IN_G = #30000 1'b1;
	IN_G = #70000 1'b0;
	IN_G = #60000 1'b1;
	IN_G = #90000 1'b0;
	IN_G = #140000 1'b1;
	IN_G = #330000 1'b0;
end 

// IN_H
initial
begin
	IN_H = 1'b0;
	IN_H = #10000 1'b1;
	IN_H = #120000 1'b0;
	IN_H = #30000 1'b1;
	IN_H = #90000 1'b0;
	IN_H = #140000 1'b1;
	IN_H = #330000 1'b0;
end 

// IN_I
initial
begin
	IN_I = 1'b0;
	IN_I = #30000 1'b1;
	IN_I = #100000 1'b0;
	IN_I = #260000 1'b1;
	IN_I = #330000 1'b0;
end 

// IN_J
initial
begin
	IN_J = 1'b0;
	IN_J = #110000 1'b1;
	IN_J = #90000 1'b0;
	IN_J = #190000 1'b1;
	IN_J = #330000 1'b0;
end 
endmodule

